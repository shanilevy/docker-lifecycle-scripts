

node {
  
  sh "docker images -qa | xargs docker rmi -f || true" 
   // Get some code from a GitHub repository
   git url: 'https://github.com/shanilevy/docker-lifecycle-scripts'
  def artServer = Artifactory.server('artifactory-shani-gcp')
  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'shani-gcp',
  usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
    def uname=env.USERNAME
    def pw=env.PASSWORD
    artServer.username=uname
    artServer.password=pw
    def curlstr="curl -H 'X-JFrog-Art-Api:$pw' '$artServer.url"
    def artDocker= Artifactory.docker(uname, pw)
    def buildInfo = Artifactory.newBuildInfo()
    dir('docker-framework') {
      buildInfo.env.capture = true
      // Mark the code checkout 'stage'....
      sh 'ls -al'
      stage('Resolve') {
        def tomcatverstr=curlstr+ "/api/search/latestVersion?g=org.apache&a=apache-tomcat&repos=generic-local'"
        println(tomcatverstr)
        sh tomcatverstr+' > tomcat/version.txt'
        env.TOMCAT_VERSION=readFile('tomcat/version.txt')
        sh 'echo $TOMCAT_VERSION'
        //sh 'rm -rf docker-framework/tomcat'
        //sh 'rm -rf docker-framework/jdk'
        
        def downloadSpec = """{
         "files": [
          {
           "pattern": "generic-local/java/jdk-8u91-linux-x64.tar.gz",
           "target": "jdk/jdk-8-linux-x64.tar.gz",
           "flat":"true"
          },
          {
           "pattern": "generic-local/org/apache/apache-tomcat/apache-tomcat-"""+env.TOMCAT_VERSION+""".tar.gz",
           "target": "tomcat/apache-tomcat-8.tar.gz",
           "flat":"true"
          }
          ]
        }"""

        artServer.download(downloadSpec, buildInfo)
        sh 'pwd'
        sh 'ls -al jdk'
        sh 'ls -al tomcat'
        sh 'echo download complete'
      }
      stage('docker build') {
        buildInfo.env.collect()
        println('starting build '+env.BUILD_NUMBER)
        def tagName='35.195.91.252:5002/docker-framework:'+env.BUILD_NUMBER
        sh 'pwd'
        sh 'ls -al'
        sh 'cat Dockerfile'
        docker.build(tagName)
        artDocker.push(tagName, 'docker-dev', buildInfo)
        artServer.publishBuildInfo(buildInfo)
        println('Retagging Image')
        sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
        sh 'cat retag_out.json'
        def retagstr=curlstr+"/api/docker/docker-dev-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
        sh retagstr
      }
    }
  }
}
node {
  git url: 'https://github.com/shanilevu/docker-lifecycle-scripts'
  def artServer = Artifactory.server('artifactory-shani-gcp')
  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'shani-gcp',
  usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
    def uname=env.USERNAME
    def pw=env.PASSWORD
    artServer.username=uname
    artServer.password=pw
    def curlstr="curl -H 'X-JFrog-Art-Api:$pw' '$artServer.url"
    def artDocker= Artifactory.docker(uname, pw)
    dir('docker-framework/framework-test')
    {
      stage('testing') {
        println('Get the latest version of the tomcat war from libs-release-local repo.  We only want war files that have been released')
        def warverstr=curlstr+ "/api/search/latestVersion?g=org.jfrog.example.gradle&a=webservice&repos=libs-release-local'"
        sh warverstr +' > war/version.txt'
        env.WARVER=readFile('war/version.txt')
        def downloadSpecWar = """{
 "files": [
  {
   "pattern": "libs-release-local/org/jfrog/example/gradle/webservice/"""+env.WARVER+"""/*.war",
   "target": "war/webservice.war",
   "flat":"true"
  }
  ]
}""" //"//DownloadSpec
        println(downloadSpecWar)
        artServer.download(downloadSpecWar)
        def tagNameTest='docker-framework-test:'+env.BUILD_NUMBER
        docker.build(tagNameTest)
        docker.image(tagNameTest).withRun('-p 8181:8181') {c ->
          sleep 5
          sh 'curl "http://localhost:8181/swampup/"'
        }
      }
      stage('Xray scan')
      {
        def xrayConfig = [
          //Mandatory parameters
          'buildName'         : env.JOB_NAME,
          'buildNumber'       :  env.BUILD_NUMBER,

          //Optional
          'failBuild'        :false //Default
        ]

        // Scan xray build
        def xrayResults = artServer.xrayScan xrayConfig
        // Print full report from xray
        echo xrayResults as String
      }
      stage('promote') {
        def promotionConfig = [
          // Mandatory parameters
          'buildName'          : env.JOB_NAME,
          'buildNumber'        : env.BUILD_NUMBER,
          'targetRepo'         : 'docker-prod-local',

          // Optional parameters
          'comment'            : 'Framework works with latest version of application to pass test',
          'sourceRepo'         : 'docker-dev-local',
          'status'             : 'Released',
          'includeDependencies': false,
          'copy'               : true
        ]

        // Promote build
        artServer.promote promotionConfig
        sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
        sh 'cat retag_out.json'
        def retagstr=curlstr+"/api/docker/docker-prod-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
        sh retagstr
      }
    }
  }
}
