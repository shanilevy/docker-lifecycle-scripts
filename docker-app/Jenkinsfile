node {
  def artServer = Artifactory.server('artifactory-shani-gcp')
   artServer.credentialsId='shani-gcp'
   def buildInfo = Artifactory.newBuildInfo()
   // Mark the code checkout 'stage'....
   stage('Checkout Docker') {

   // Get some code from a GitHub repository
   git url: 'https://github.com/shanilevy/docker-lifecycle-scripts'
   }
   buildInfo.env.capture = true
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'shani-gcp',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
sh 'echo credentials applied'

def curlstr="curl -H 'X-JFrog-Art-Api:$pw' '$artServer.url"
dir('docker-app') {
   stage('Resolve') {
       def warverstr=curlstr+ "/api/search/latestVersion?g=org.jfrog.example.gradle&a=webservice&repos=libs-release-local'"
       sh warverstr +' > war/version.txt'
       sh 'cat war/version.txt'
       env.WARVER=readFile('war/version.txt')
        def downloadSpec = """{
 "files": [
  {
   "pattern": "libs-release-local/org/jfrog/example/gradle/webservice/"""+env.WARVER+"""/*.war",
   "target": "war/webservice.war",
   "flat":"true"
  }
  ]
}"""
    println(downloadSpec)
    artServer.download(downloadSpec, buildInfo)
   }
   stage('Build and Deploy') {
        def tagName='docker-dev.yodafrog.sas.jfrog.internal:8081/docker-webinar-app:'+env.BUILD_NUMBER
        docker.build(tagName)
        def artDocker= Artifactory.docker(uname, pw)
        artDocker.push(tagName, 'docker-dev', buildInfo)
        artServer.publishBuildInfo(buildInfo)
        sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
        sh 'cat retag_out.json'
        def retagstr=curlstr+"/api/docker/docker-dev-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
        sh retagstr
   }
}
}
}
node {
    git url: 'https://github.com/shanilevy/docker-lifecycle-scripts'
    def artServer = Artifactory.server('yodafrog')
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'shani-gcp',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
        def artDocker= Artifactory.docker(uname, pw)
def curlstr="curl -H 'X-JFrog-Art-Api:$pw' '$artServer.url"
    dir('docker-app/app-test') {
        stage('testing app') {
            def imageName='docker-dev.yodafrog.sas.jfrog.internal:8081/docker-webinar-app'
            sh 'docker images | grep docker-webinar-app'
            println(imageName)
            sh 'docker rmi '+imageName+' || true'
            artDocker.pull(imageName)
            docker.image(imageName).withRun('-p 8181:8181') {c ->
                  sleep 5
                  sh 'curl "http://localhost:8181/swampup/"'
            }
            sh 'docker rmi '+imageName+' || true'
        }
        stage('Xray scan')
        {
          def xrayConfig = [
            //Mandatory parameters
            'buildName'         : env.JOB_NAME,
            'buildNumber'       : env.BUILD_NUMBER,

            //Optional
            'failBuild'        : false
          ]

          // Scan xray build
          def xrayResults = artServer.xrayScan xrayConfig
          // Print full report from xray
          echo xrayResults as String
        }
        stage('Promotions') {
            def promotionConfig = [
            // Mandatory parameters
            'buildName'          : env.JOB_NAME,
            'buildNumber'        : env.BUILD_NUMBER,
            'targetRepo'         : 'docker-prod-local',

            // Optional parameters
            'comment'            : 'App Image has passed test.',
            'status'             : 'Released',
            'includeDependencies': false,
            'copy'               : true
            ]
            // Promote build
            artServer.promote promotionConfig
            
            sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
            sh 'cat retag_out.json'
            def retagstr=curlstr+"/api/docker/docker-prod-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
            sh retagstr
            }
            stage('distribute')
            {
                // def distributionConfig = [
                //     // Mandatory parameters
                //     'buildName'             : env.JOB_NAME,
                //     'buildNumber'           : env.BUILD_NUMBER,
                //     'targetRepo'            : 'butler-webinar',
                        
                //     // Optional parameters
                //     'publish'               : true, // Default: true. If true, artifacts are published when deployed to Bintray.
                //     'overrideExistingFiles' : true, // Default: false. If true, Artifactory overwrites builds already existing in the target path in Bintray.
                //     'async'                 : false, // Default: false. If true, the build will be distributed asynchronously. Errors and warnings may be viewed in the Artifactory log.
                //     "sourceRepos"           : ["docker-prod-local"], // An array of local repositories from which build artifacts should be collected.
                //     'dryRun'                : false, // Default: false. If true, distribution is only simulated. No files are actually moved.
                // ]

                // artServer.distribute distributionConfig
                 sh 'sed -E "s/@/$BUILD_NUMBER/" distributeDocker.json > distributeDocker_out.json'
              def distribStr=curlstr+'/api/distribute' + "' -X POST -H 'Content-Type: application/json' "
              def dockerDistrib = distribStr+ "-T distributeDocker_out.json"
              println(dockerDistrib)
              sh dockerDistrib
             
            }
        }
    }
}
