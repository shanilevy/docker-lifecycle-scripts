node {
  def artServer = Artifactory.server('Artifactroy-cluster-gcp')
   def buildInfo = Artifactory.newBuildInfo()
   stage 'Checkout Gradle'
        git url: 'https://github.com/jfrogtraining/project-examples.git'
//dir('gradle-examples/4/gradle-example-ci-server') {
// sh './increment.sh'
//}

    stage 'Build Gradle'
        def artifactoryGradle = Artifactory.newGradleBuild()
        artifactoryGradle.tool = 'gradle' // Tool name from Jenkins configuration
        artifactoryGradle.deployer repo:'libs-dev-local', server: artServer
        artifactoryGradle.resolver repo:'libs-dev', server: artServer
        artifactoryGradle.run rootDir: "gradle-examples/4/gradle-example-ci-server/", buildFile: 'build.gradle', tasks: 'clean artifactoryPublish', buildInfo: buildInfo

        artServer.publishBuildInfo buildInfo
}

node {
    git url: 'https://github.com/shanilevy/docker-lifecycle-scripts'
    def artServer = Artifactory.server('Artifactroy-cluster-gcp')
    artServer.username='admin'
    artServer.password='password'  
    def curlstr="curl -H 'X-JFrog-Art-Api:AKCp5aU5Ys8KCNz2VT51thWstoPg689UehjnGcACpX6cSFr4yGQG11mRh2mAmabmPicLLBcE4' '$artServer.url" 
    dir('docker-app')
           {
               stage('test')
                {
           
               
                def warverstr=curlstr+ "/api/search/latestVersion?g=org.jfrog.example.gradle&a=webservice&repos=libs-dev-local'"
                echo $warverstr
                sh warverstr +' > war/version.txt'
                sh 'cat war/version.txt'
                env.WARVER=readFile('war/version.txt')
                def downloadSpec = """{
                "files": [
                    {
                        "pattern": "libs-dev-local/org/jfrog/example/gradle/webservice/"""+env.WARVER+"""/*.war",
                        //"pattern": "libs-dev-local/org/jfrog/example/gradle/webservice/1.1.5/*.war",
                        "target": "war/webservice.war",
                        "flat":"true"
                    }
                ]
                }"""
                println(downloadSpec)
                artServer.download(downloadSpec)
                def tagNameTest='docker-app-test:'+env.BUILD_NUMBER
                sh 'docker rmi '+tagNameTest+' || true'
                docker.build(tagNameTest)
                docker.image(tagNameTest).withRun('-p 8181:8181') {c ->
                sleep 5
                    sh 'curl "http://localhost:8181/swampup/"'
                }
           }
        
            stage('Xray scan')
                {
                def xrayConfig = [
                    //Mandatory parameters
                    'buildName'         : env.JOB_NAME,
                    'buildNumber'       : env.BUILD_NUMBER,

                    //Optional
                    'failBuild'        : false
                ]

                // Scan xray build
                def xrayResults = artServer.xrayScan xrayConfig
                // Print full report from xray
                echo xrayResults as String
                }
            stage('promote') {
                def promotionConfig = [
                // Mandatory parameters
                'buildName'          : env.JOB_NAME,
                'buildNumber'        : env.BUILD_NUMBER,
                'targetRepo'         : 'libs-release-local',

                // Optional parameters
                'comment'            : 'ready for release',
                'sourceRepo'         : 'libs-dev-local',
                'status'             : 'Released',
                'includeDependencies': true,
                'copy'               : true
            ]

            // Promote build
            artServer.promote promotionConfig
            }
           }
           dir('gradle-app'){
            stage('distribute')
            {

                def distributionConfig = [
                    // Mandatory parameters
                    'buildName'             : env.JOB_NAME,
                    'buildNumber'           : env.BUILD_NUMBER,
                    'targetRepo'            : 'butler-webinar',
                        
                    // Optional parameters
                    'publish'               : true, // Default: true. If true, artifacts are published when deployed to Bintray.
                    'overrideExistingFiles' : true, // Default: false. If true, Artifactory overwrites builds already existing in the target path in Bintray.
                    'async'                 : false, // Default: false. If true, the build will be distributed asynchronously. Errors and warnings may be viewed in the Artifactory log.
                    "sourceRepos"           : ["libs-release-local"], // An array of local repositories from which build artifacts should be collected.
                    'dryRun'                : false, // Default: false. If true, distribution is only simulated. No files are actually moved.
                ]

            artServer.distribute distributionConfig

            //   def distribStr=curlstr+'api/build/distribute/'+env.JOB_NAME+'/'+env.BUILD_NUMBER+"' -X POST -H 'Content-Type: application/json' "
            //   def warDistrib = distribStr+"-T distributeWar.json"
            //   println(warDistrib)
            //   sh warDistrib
            }
           }
}
